import io
import os
import json
import yaml
import shutil
import subprocess
import pkg_resources

import click

from rtk8s.rendering import render_project, render_string
from rtk8s.objects import Secret, Ingress

TEMPLATES_ROOT = pkg_resources.resource_filename("rtk8s", "templates")

V1_ROOT = os.path.join(TEMPLATES_ROOT, "v1")

KUBECTL = os.getenv("KUBECTL", "kubectl")
RTK_APP_DIR = "rtk8s_apps/v1/"
RTK_SVC_TEMPLATE = os.path.join(V1_ROOT, "service/")
RTK_CONF_TEMPLATE = os.path.join(V1_ROOT, "spec/config.yml")


def _pod_identifiers(name, suffixes=("-app", "-proxy-app")):

    ids = []

    if len(suffixes) == 0:
        suffixes = ("", )

    for suffix in suffixes:
        names = subprocess.Popen(f"{KUBECTL} get pods --all-namespaces".split(), stdout=subprocess.PIPE)
        matches = subprocess.Popen(('grep', f'{name}{suffix}'), stdin=names.stdout, stdout=subprocess.PIPE)
        filtered = subprocess.Popen(('awk', "{print $2}"), stdin=matches.stdout, stdout=subprocess.PIPE)
        names.stdout.close()
        target = filtered.communicate()[0].decode("utf-8").replace("\n", "")
        ids.append(target)

    return ids


def _cmd(s):
    """Execute a given command."""
    try:
        subprocess.call(s.split())
    except subprocess.CalledProcessError:
        raise IOError(f"Failed to execute command '{s}'. Aborting.")


def _update(deployment, prefix):
    """Update the target deployment."""

    path = os.path.join(prefix, deployment)

    components = ["proxy", "app"]
    paths = []
    for root, dirs, files in os.walk(os.path.join(path, "registry")):
        for file in files:
            if file.endswith(".json"):
                subpath = file.replace(".json", "")
                for component in components:
                    paths.append(subpath + "-" + component)

    ingress_path = os.path.join(path, "manifests", "ingress.json")
    ingress = Ingress(deployment, paths=paths)

    with open(ingress_path, "w") as ingress_spec:
        ingress_spec.write(ingress.to_json(indent=4))

    # secret_path = os.path.join(path, "manifests", "secret.json")
    _cmd(f"{KUBECTL} apply -f {ingress_path}")


@click.group()
def cli():
    pass


@cli.command()
@click.argument("target")
@click.option("-p", "--prefix", default=RTK_APP_DIR)
@click.option("-c", "--confirm", default=True)
def delete(target, prefix, confirm):
    """Delete a target deployment. This will remove _all_ apps associated with this deployment, including metadata."""
    root = os.path.join(prefix, target)
    if not os.path.exists(root):
        raise FileNotFoundError(
            f"Cannot find an initialised rtk8s deployment at {root}."
        )

    elif (
        confirm
        and input(f"Are you sure you want to delete the deployment at {root}? Y/n")
        == "Y"
    ):

        print("Deleting apps...")
        for app in os.listdir(os.path.join(root, "registry")):
            name = os.path.splitext(app)[0]
            print(f"Deleting '{name}'...")
            cdir = os.path.join(root, "src", name, "app", "manifests")
            for file in os.listdir(os.path.join(root, "src", name, "app", "manifests")):
                _cmd(f"{KUBECTL} delete -f {os.path.join(cdir, file)}")

            cdir = os.path.join(root, "src", name, "proxy", "manifests")
            for file in os.listdir(cdir):
                _cmd(f"{KUBECTL} delete -f {os.path.join(cdir, file)}")

        print("Deleting ingress...")
        cdir = os.path.join(root, "manifests")
        for file in os.listdir(cdir):
            _cmd(f"{KUBECTL} delete -f {os.path.join(cdir, file)}")

        print("Cleaning directories...")
        shutil.rmtree(root)
        print("Done.")


@cli.command()
@click.argument("deployment")
@click.option("-p", "--prefix", default=RTK_APP_DIR)
@click.option("-k", "--ssl-keys", required=True)
def create(deployment, ssl_keys, prefix):
    path = os.path.join(prefix, deployment)
    if os.path.exists(path):
        print(f"There's an existing deployment at {path}. Skipping.")
    else:
        os.makedirs(os.path.join(path, "manifests"))
        secret_path = os.path.join(path, "manifests", "secret.json")
        ingress_path = os.path.join(path, "manifests", "ingress.json")

        secret = Secret(
            deployment,
            crt=os.path.join(ssl_keys, "cert.pem"),
            key=os.path.join(ssl_keys, "key.pem"),
        )

        ingress = Ingress(deployment)

        with open(secret_path, "w") as secret_spec:
            secret_spec.write(secret.to_json(indent=4))

        with open(ingress_path, "w") as ingress_spec:
            ingress_spec.write(ingress.to_json(indent=4))

        # apply!
        _cmd(f"{KUBECTL} apply -f {secret_path}")
        _cmd(f"{KUBECTL} apply -f {ingress_path}")


@cli.command()
@click.argument("name")
@click.argument("deployment")
@click.option("-p", "--prefix", default=RTK_APP_DIR)
@click.option("-c", "--config", default=None)
@click.option("-T", "--template", default=RTK_CONF_TEMPLATE)
def add(name, deployment, prefix, config, template):

    splunk_info = {
        "username": os.getenv("SPLUNK_USERNAME", ""),
        "password": os.getenv("SPLUNK_USERNAME", ""),
        "host": os.getenv("SPLUNK_HOST", ""),
        "port": os.getenv("SPLUNK_PORT", ""),
    }

    if not config:
        app_info = {"host": os.getenv("SMEILING_HOST", ""), "name": name}
        data = render_string(
            open(template).read(), {"app": app_info, "splunk": splunk_info}
        )
        config = yaml.load(io.StringIO(data), yaml.SafeLoader)
    elif config.endswith(".json"):
        config = json.load(open(config))
    elif config.endswith(".yml") or config.endswith(".yaml"):
        config = yaml.load(open(config), yaml.SafeLoader)

    registry = os.path.join(prefix, deployment, "registry")

    if not os.path.exists(registry):
        os.makedirs(registry)

    config_path = os.path.join(registry, f"{name}.json")

    if os.path.exists(config_path):
        raise FileExistsError(f"An app with name '{name}' already exists.")
    else:
        with open(config_path, "w") as config_file:
            config_file.write(json.dumps(config, indent=4))


@cli.command()
@click.argument("name")
@click.argument("deployment")
@click.option("-p", "--prefix", default=RTK_APP_DIR)
@click.option("-T", "--templates", default=RTK_SVC_TEMPLATE)
@click.option("-R", "--rebuild", is_flag=True)
@click.option("-O", "--overwrite", is_flag=False)
def deploy(name, deployment, prefix, templates, rebuild, overwrite):
    root = os.path.join(prefix, deployment)
    src_path = os.path.join(prefix, deployment, "src", name)
    conf_path = os.path.join(root, "registry", name + ".json")

    print(f"Building {name} for {deployment}...")
    if not os.path.exists(root):
        raise FileNotFoundError(
            f"Cannot find an initialised rtk8s deployment at {root}."
        )
    elif not os.path.exists(conf_path):
        raise FileNotFoundError(
            f"Cannot find a valid config for {name} at {conf_path}."
        )
    elif os.path.exists(src_path) and not rebuild:
        for component in ["app", "proxy"]:
            for root, dirs, files in os.walk(
                os.path.join(src_path, component, "manifests")
            ):
                for file in files:
                    _cmd(f"{KUBECTL} apply -f {os.path.join(root, file)}")
    else:
        with open(conf_path) as conf_file:
            config = json.load(conf_file)

            name = config["app"]["name"]

            render_project(templates, src_path, config, overwrite=overwrite)

            for root, dirs, files in os.walk(src_path):
                component = os.path.split(root)[-1]
                for file in files:
                    if file == "Dockerfile":
                        _cmd(
                            f"docker build {src_path} -t {name}-{component}:latest -f {src_path}/{component}/Dockerfile"
                        )

                        repo_host = (
                            config["app"]
                            .get("deployment", {})
                            .get("repo", "localhost:32000")
                        )
                        if repo_host.startswith("localhost"):
                            """
                            docker build . -t ${dir%/}:latest -f ${dir%/}/Dockerfile
                            docker tag ${dir%/} gcr.io/encoded-antler-258511/${dir%/}
                            docker push gcr.io/encoded-antler-258511/${dir%/}
                            """
                        _cmd(
                            f"docker tag {name}-{component} {repo_host}/{name}-{component}"
                        )
                        _cmd(f"docker push {repo_host}/{name}-{component}")

            for component in ["app", "proxy"]:
                for root, dirs, files in os.walk(
                    os.path.join(src_path, component, "manifests")
                ):
                    for file in files:
                        _cmd(f"{KUBECTL} apply -f {os.path.join(root, file)}")

    _update(deployment, prefix)

    if rebuild:
        print("Deleting legacy pods...")
        # this forces the cluster to use the most recent image -- they will respawn after being deleted.
        for pod in _pod_identifiers(name):
            _cmd(f"{KUBECTL} delete pods {pod}")

    print(
        f"Built {name} for {deployment}. Your service will be available shortly at '/{name}-app'"
    )


@cli.command()
@click.argument("name")
@click.argument("deployment")
@click.option("-p", "--prefix", default=RTK_APP_DIR)
@click.option("--clean-all", is_flag=True)
def remove(name, deployment, prefix, clean_all):
    root = os.path.join(prefix, deployment)
    conf_path = os.path.join(root, "registry", name + ".json")
    src_path = os.path.join(root, "src", name)

    if not os.path.exists(root):
        raise FileNotFoundError(
            f"Cannot find an initialised rtk8s deployment at {root}."
        )
    elif not os.path.exists(conf_path):
        raise FileNotFoundError(
            f"Cannot remove app '{name}' - it does not exist (no file at {conf_path}."
        )
    elif not os.path.join(src_path):
        raise FileNotFoundError(
            f"Malformed app initialisation detected. "
            f"Got a valid registry file, but no src at {src_path}. Aborting."
        )
    else:

        for component in ["app", "proxy"]:
            manifests = os.path.join(src_path, component, "manifests")

            if len(os.listdir(manifests)) != 0:
                for root, dirs, files in os.walk(manifests):
                    for file in files:
                        _cmd(f"{KUBECTL} delete -f {os.path.join(root, file)}")

        if clean_all:
            print("Removing config...")
            os.unlink(conf_path)

        shutil.rmtree(src_path)

        _update(deployment, prefix)


if __name__ == "__main__":
    cli()
